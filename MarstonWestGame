<!doctype html> 
<html lang="en"> 
<head> 
	<meta charset="UTF-8" />
    <title>Phaser - Making your first game, part 9</title>
    <script src="//cdn.jsdelivr.net/phaser/2.2.2/phaser.min.js"></script>
    <style type="text/css">
        body {
            margin: 0;
        }
    </style>
</head>
<body>

<script type="text/javascript">

var game = new Phaser.Game(800, 600, Phaser.AUTO, '', { preload: preload, create: create, update: update });

function preload() {

    game.load.image('sky', 'assets/sky.png');
    //game.load.image('ground', 'assets/platform.png');
    game.load.image('ground', 'assets/floorblock.png');
    game.load.image('star', 'assets/star.png');
    //game.load.spritesheet('dude', 'assets/dude.png', 32, 48);
    game.load.spritesheet('dude', 'assets/Fighter1master.png', 36, 42);
    game.load.image('hitboxTest', 'assets/testHitbox.png');
    
    
}

var player;

var platforms;
var cursors;
var punchkey;
var kickkey;
var pun;

var stars;
var score = 0;
var scoreText;

function create() {

    //  We're going to be using physics, so enable the Arcade Physics system
    game.physics.startSystem(Phaser.Physics.ARCADE);

    //  A simple background for our game
    game.add.sprite(0, 0, 'sky');

    //  The platforms group contains the ground and the 2 ledges we can jump on
    platforms = game.add.group();

    //  We will enable physics for any object that is created in this group
    platforms.enableBody = true;

    // Here we create the ground.
    var ground = platforms.create(30, game.world.height - 30, 'ground');

    //  Scale it to fit the width of the game (the original sprite is 400x32 in size)
    ground.scale.setTo(20, 1);

    //  This stops it from falling away when you jump on it
    ground.body.immovable = true;

    //  Now let's create two ledges
   // var ledge = platforms.create(400, 400, 'ground');
    //ledge.body.immovable = true;

    //ledge = platforms.create(-150, 250, 'ground');
    //ledge.body.immovable = true;

    // The player and its settings
    player = game.add.sprite(32, game.world.height - 150, 'dude');
    
    player.scale.x = 2;
    player.scale.y = 2;
    player.anchor.setTo(.5,0);
    
    
    //  We need to enable physics on the player
    game.physics.arcade.enable(player);

    //  Player physics properties. Give the little guy a slight bounce.
    player.body.bounce.y = 0.2;
    player.body.gravity.y = 400;
    //player.body.collideWorldBounds = true;
    player.body.collideWorldBounds = false;
    
    /*
    // Set Anchor to the center of your sprite
    'leftdude'.anchor.setTo(.5,.5);
    // Invert scale.x to flip left/
    'leftdude'.scale.x *= -1;

    //// Invert scale.y to flip up/down
    //yourSprite.scale.y *= -1;
    */

    //  Our two animations, walking left and right.
    player.animations.add('left',  [2, 3, 0], 10, true);
    player.animations.add('right', [2, 3, 0], 10, true);
    
    //idle animation
    player.animations.add('idle', [0, 1], 5, true);
    
    //jump animation
    player.animations.add('jump', [8, 9], 5, true); //need to adjust animation speed
    
    //shield animation
    player.animations.add('shield', [7], 5, true);
    
    //punch animations
    player.animations.add('punch', [4, 5], 10, true);
    
    //kick
    player.animations.add('kick', [1, 6], 10, true);

    //player got hit animation
    player.animations.add('ko', [7], 5, true);

    
    //  Finally some stars to collect
    stars = game.add.group();

    //  We will enable physics for any star that is created in this group
    stars.enableBody = true;

    //  Here we'll create 12 of them evenly spaced apart
    for (var i = 0; i < 12; i++)
    {
        //  Create a star inside of the 'stars' group
        var star = stars.create(i * 70, 0, 'star');

        //  Let gravity do its thing
        star.body.gravity.y = 300;

        //  This just gives each star a slightly random bounce value
        star.body.bounce.y = 0.7 + Math.random() * 0.2;
    }

    //  The score
    scoreText = game.add.text(16, 16, 'score: 0', { fontSize: '32px', fill: '#000' });

    //  Our controls.
    cursors  = game.input.keyboard.createCursorKeys();
    punchkey = game.input.keyboard.addKey(Phaser.Keyboard.P);
    kickkey  = game.input.keyboard.addKey(Phaser.Keyboard.O);
    
//This is where the hitbox will be created
    hitboxes = game.add.group();
    hitboxes.enableBody;
    //hitboxes now a child of player
   player.addChild(hitboxes);


}

function update() {

    //  Collide the player and the stars with the platforms
    game.physics.arcade.collide(player, platforms);
    game.physics.arcade.collide(stars, platforms);

    //  Checks to see if the player overlaps with any of the stars, if he does call the collectStar function
    game.physics.arcade.overlap(player, stars, collectStar, null, this);

    //  Reset the players velocity (movement)
    player.body.velocity.x = 0;
    
    if (cursors.left.isDown)
    {
        //  Move to the left
        player.body.velocity.x = -250;
        
        if (player.scale.x > 0 ){
        player.scale.x *=-1;
        }
        
        player.animations.play('left');
    }
    else if (cursors.right.isDown)
    {
        //  Move to the right
        
        //logic to change direction facing
        if (player.scale.x < 0 ){
        player.scale.x *=-1;
        }
        
        player.body.velocity.x = 250;
        player.animations.play('right');
    }
    
    else if (cursors.down.isDown && player.body.touching.down)
    {
         //player.body.velocity.x = 150;
        //player.animations.play('kick');
        player.animations.play('shield');
    }
    else if (cursors.down.isDown)
    {
        player.body.velocity.y = 200;
        player.frame = 9;
    }
       else if (punchkey.isDown)
    {
        
        player.animations.play('punch');
    }
     else if (kickkey.isDown)
    {
        player.animations.play('kick');
        spawnHitBox();
    }
    
    else
    {
        //  Stand still
        //player.animations.stop();
        //player.frame = 2;
        
        //ide animation
         player.animations.play('idle');
    }
    
    if (cursors.up.isDown && player.body.touching.down )
    {
        player.animations.play('jump');
        player.body.velocity.y = -400;

    }
    
}

function collectStar (player, star) {
    
    // Removes the star from the screen
    star.kill();

    //  Add and update the score
    score += 10;
    scoreText.text = 'Score: ' + score;

}

function spawnHitBox() {
    var hitbox1 = hitboxes.create(16,8,'hitboxTest');
   game.time.events.add(Phaser.Timer.SECOND * .01, hitbox1.kill, hitbox1);
}

</script>

</body>
</html>
